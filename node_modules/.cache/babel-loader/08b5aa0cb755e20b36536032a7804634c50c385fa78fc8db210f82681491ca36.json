{"ast":null,"code":"const initialState = {\n  cartData: [],\n  cartCount: 0\n};\nconst calculateCartCount = cartData => {\n  return cartData.reduce((count, item) => count + item.quantity, 0);\n};\nfunction cartItem(state = initialState, action) {\n  switch (action.type) {\n    case \"Add_To_Cart\":\n      const existingItem = state.cartData.find(item => item.id === action.payload.id);\n      let newCartData;\n      if (existingItem) {\n        newCartData = state.cartData.map(item => item.id === action.payload.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        newCartData = [...state.cartData, {\n          ...action.payload,\n          quantity: 1\n        }];\n      }\n      return {\n        ...state,\n        cartData: newCartData,\n        cartCount: calculateCartCount(newCartData)\n      };\n    case \"Remove_From_Cart\":\n      const updatedCartData = state.cartData.map(item => item.id === action.payload ? {\n        ...item,\n        quantity: item.quantity - 1\n      } : item).filter(item => item.quantity > 0);\n      return {\n        ...state,\n        cartData: updatedCartData,\n        cartCount: calculateCartCount(updatedCartData)\n      };\n    case \"Update_Quantity\":\n      const newUpdatedCartData = state.cartData.map(item => item.id === action.payload.item.id ? {\n        ...item,\n        quantity: action.payload.quantity\n      } : item);\n      return {\n        ...state,\n        cartData: newUpdatedCartData,\n        cartCount: calculateCartCount(newUpdatedCartData)\n      };\n    default:\n      return state;\n  }\n}\nexport default cartItem;\n\n// const initialState = {\n//   cartData: [],\n//   cartCount: 0,\n// };\n\n// const calculateCartCount = (cartData) => {\n//   return cartData.reduce((count, item) => count + item.quantity, 0);\n// };\n\n// function cartItem(state = initialState, action) {\n//   switch (action.type) {\n//     case \"Add_To_Cart\":\n//       // Check if item is already in the cart\n//       const existingItem = state.cartData.find(\n//         (item) => item.id === action.payload.id\n//       );\n//       let newCartData;\n//       if (existingItem) {\n//         newCartData = state.cartData.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, quantity: item.quantity + 1 }\n//             : item\n//         );\n//       } else {\n//         newCartData = [...state.cartData, { ...action.payload, quantity: 1 }];\n//       }\n//       return {\n//         ...state,\n//         cartData: newCartData,\n//         cartCount: calculateCartCount(newCartData),\n//       };\n//     case \"Remove_From_Cart\":\n//       const updatedCartData = state.cartData\n//         .map((item) =>\n//           item.id === action.payload.id && item.quantity > 1\n//             ? { ...item, quantity: item.quantity - 1 }\n//             : item\n//         )\n//         .filter((item) => item.id !== action.payload.id || item.quantity > 0);\n\n//       return {\n//         ...state,\n//         cartData: updatedCartData,\n//         cartCount: calculateCartCount(updatedCartData),\n//       };\n//     case \"Update_Quantity\":\n//       const newUpdatedCartData = state.cartData.map((item) =>\n//         item.id === action.payload.item.id\n//           ? { ...item, quantity: action.payload.quantity }\n//           : item\n//       );\n//       return {\n//         ...state,\n//         cartData: newUpdatedCartData,\n//         cartCount: calculateCartCount(newUpdatedCartData),\n//       };\n//     default:\n//       return state;\n//   }\n// }\n\n// export default cartItem;\n\n// const initialState = {\n//   cartData: [],\n//   cartCount: 0,\n// };\n\n// function cartItem(state = initialState, action) {\n//   switch (action.type) {\n//     case \"Add_To_Cart\":\n//       // Check if item is already in the cart\n//       const existingItem = state.cartData.find(\n//         (item) => item.id === action.payload.id\n//       );\n//       if (existingItem) {\n//         return {\n//           ...state,\n//           cartData: state.cartData.map((item) =>\n//             item.id === action.payload.id\n//               ? { ...item, quantity: item.quantity + 1 }\n//               : item\n//           ),\n//           cartCount: state.cartCount + 1,\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           cartData: [...state.cartData, { ...action.payload, quantity: 1 }],\n//           cartCount: state.cartCount + 1,\n//         };\n//       }\n//     case \"Remove_From_Cart\":\n//       const updatedCartData = state.cartData\n//         .map((item) =>\n//           item.id === action.payload.id && item.quantity > 1\n//             ? { ...item, quantity: item.quantity - 1 }\n//             : item\n//         )\n//         .filter((item) => item.id !== action.payload.id || item.quantity > 0);\n\n//       return {\n//         ...state,\n//         cartData: updatedCartData,\n//         cartCount: state.cartCount - 1,\n//       };\n\n//     case \"Update_Quantity\":\n//       return {\n//         ...state,\n//         cartData: state.cartData.map((item) =>\n//           item.id === action.payload.item.id\n//             ? { ...item, quantity: action.payload.quantity }\n//             : item\n//         ),\n//       };\n\n//     default:\n//       return state;\n//   }\n// }\n\n// export default cartItem;\n\n// // const initialState = {\n// //   cartData: [],\n// //   cartCount: 0,\n// // };\n\n// // function cartItem(state = initialState, action) {\n// //   switch (action.type) {\n// //     case \"Add_To_Cart\":\n// //       return {\n// //         ...state,\n// //         cartData: [...state.cartData, action.payload],\n// //         cartCount: state.cartCount + 1,\n// //       };\n// //     case \"Remove_From_Cart\":\n// //       return {\n// //         ...state,\n// //         cartData: state.cartData.filter((item) => item !== action.payload),\n// //         cartCount: state.cartCount - 1,\n// //       };\n\n// //     default:\n// //       return state;\n// //   }\n// // }\n\n// // export default cartItem;","map":{"version":3,"names":["initialState","cartData","cartCount","calculateCartCount","reduce","count","item","quantity","cartItem","state","action","type","existingItem","find","id","payload","newCartData","map","updatedCartData","filter","newUpdatedCartData"],"sources":["/Users/pramod/madhuri/React-Practice/react-assignment/src/Component/Redux/Reducer.js"],"sourcesContent":["const initialState = {\n  cartData: [],\n  cartCount: 0,\n};\n\nconst calculateCartCount = (cartData) => {\n  return cartData.reduce((count, item) => count + item.quantity, 0);\n};\n\nfunction cartItem(state = initialState, action) {\n  switch (action.type) {\n    case \"Add_To_Cart\":\n      const existingItem = state.cartData.find(\n        (item) => item.id === action.payload.id\n      );\n      let newCartData;\n      if (existingItem) {\n        newCartData = state.cartData.map((item) =>\n          item.id === action.payload.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      } else {\n        newCartData = [...state.cartData, { ...action.payload, quantity: 1 }];\n      }\n      return {\n        ...state,\n        cartData: newCartData,\n        cartCount: calculateCartCount(newCartData),\n      };\n    case \"Remove_From_Cart\":\n      const updatedCartData = state.cartData\n        .map((item) =>\n          item.id === action.payload\n            ? { ...item, quantity: item.quantity - 1 }\n            : item\n        )\n        .filter((item) => item.quantity > 0);\n\n      return {\n        ...state,\n        cartData: updatedCartData,\n        cartCount: calculateCartCount(updatedCartData),\n      };\n    case \"Update_Quantity\":\n      const newUpdatedCartData = state.cartData.map((item) =>\n        item.id === action.payload.item.id\n          ? { ...item, quantity: action.payload.quantity }\n          : item\n      );\n      return {\n        ...state,\n        cartData: newUpdatedCartData,\n        cartCount: calculateCartCount(newUpdatedCartData),\n      };\n    default:\n      return state;\n  }\n}\n\nexport default cartItem;\n\n// const initialState = {\n//   cartData: [],\n//   cartCount: 0,\n// };\n\n// const calculateCartCount = (cartData) => {\n//   return cartData.reduce((count, item) => count + item.quantity, 0);\n// };\n\n// function cartItem(state = initialState, action) {\n//   switch (action.type) {\n//     case \"Add_To_Cart\":\n//       // Check if item is already in the cart\n//       const existingItem = state.cartData.find(\n//         (item) => item.id === action.payload.id\n//       );\n//       let newCartData;\n//       if (existingItem) {\n//         newCartData = state.cartData.map((item) =>\n//           item.id === action.payload.id\n//             ? { ...item, quantity: item.quantity + 1 }\n//             : item\n//         );\n//       } else {\n//         newCartData = [...state.cartData, { ...action.payload, quantity: 1 }];\n//       }\n//       return {\n//         ...state,\n//         cartData: newCartData,\n//         cartCount: calculateCartCount(newCartData),\n//       };\n//     case \"Remove_From_Cart\":\n//       const updatedCartData = state.cartData\n//         .map((item) =>\n//           item.id === action.payload.id && item.quantity > 1\n//             ? { ...item, quantity: item.quantity - 1 }\n//             : item\n//         )\n//         .filter((item) => item.id !== action.payload.id || item.quantity > 0);\n\n//       return {\n//         ...state,\n//         cartData: updatedCartData,\n//         cartCount: calculateCartCount(updatedCartData),\n//       };\n//     case \"Update_Quantity\":\n//       const newUpdatedCartData = state.cartData.map((item) =>\n//         item.id === action.payload.item.id\n//           ? { ...item, quantity: action.payload.quantity }\n//           : item\n//       );\n//       return {\n//         ...state,\n//         cartData: newUpdatedCartData,\n//         cartCount: calculateCartCount(newUpdatedCartData),\n//       };\n//     default:\n//       return state;\n//   }\n// }\n\n// export default cartItem;\n\n// const initialState = {\n//   cartData: [],\n//   cartCount: 0,\n// };\n\n// function cartItem(state = initialState, action) {\n//   switch (action.type) {\n//     case \"Add_To_Cart\":\n//       // Check if item is already in the cart\n//       const existingItem = state.cartData.find(\n//         (item) => item.id === action.payload.id\n//       );\n//       if (existingItem) {\n//         return {\n//           ...state,\n//           cartData: state.cartData.map((item) =>\n//             item.id === action.payload.id\n//               ? { ...item, quantity: item.quantity + 1 }\n//               : item\n//           ),\n//           cartCount: state.cartCount + 1,\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           cartData: [...state.cartData, { ...action.payload, quantity: 1 }],\n//           cartCount: state.cartCount + 1,\n//         };\n//       }\n//     case \"Remove_From_Cart\":\n//       const updatedCartData = state.cartData\n//         .map((item) =>\n//           item.id === action.payload.id && item.quantity > 1\n//             ? { ...item, quantity: item.quantity - 1 }\n//             : item\n//         )\n//         .filter((item) => item.id !== action.payload.id || item.quantity > 0);\n\n//       return {\n//         ...state,\n//         cartData: updatedCartData,\n//         cartCount: state.cartCount - 1,\n//       };\n\n//     case \"Update_Quantity\":\n//       return {\n//         ...state,\n//         cartData: state.cartData.map((item) =>\n//           item.id === action.payload.item.id\n//             ? { ...item, quantity: action.payload.quantity }\n//             : item\n//         ),\n//       };\n\n//     default:\n//       return state;\n//   }\n// }\n\n// export default cartItem;\n\n// // const initialState = {\n// //   cartData: [],\n// //   cartCount: 0,\n// // };\n\n// // function cartItem(state = initialState, action) {\n// //   switch (action.type) {\n// //     case \"Add_To_Cart\":\n// //       return {\n// //         ...state,\n// //         cartData: [...state.cartData, action.payload],\n// //         cartCount: state.cartCount + 1,\n// //       };\n// //     case \"Remove_From_Cart\":\n// //       return {\n// //         ...state,\n// //         cartData: state.cartData.filter((item) => item !== action.payload),\n// //         cartCount: state.cartCount - 1,\n// //       };\n\n// //     default:\n// //       return state;\n// //   }\n// // }\n\n// // export default cartItem;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,kBAAkB,GAAIF,QAAQ,IAAK;EACvC,OAAOA,QAAQ,CAACG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;AACnE,CAAC;AAED,SAASC,QAAQA,CAACC,KAAK,GAAGT,YAAY,EAAEU,MAAM,EAAE;EAC9C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,MAAMC,YAAY,GAAGH,KAAK,CAACR,QAAQ,CAACY,IAAI,CACrCP,IAAI,IAAKA,IAAI,CAACQ,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EACvC,CAAC;MACD,IAAIE,WAAW;MACf,IAAIJ,YAAY,EAAE;QAChBI,WAAW,GAAGP,KAAK,CAACR,QAAQ,CAACgB,GAAG,CAAEX,IAAI,IACpCA,IAAI,CAACQ,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,GACzB;UAAE,GAAGR,IAAI;UAAEC,QAAQ,EAAED,IAAI,CAACC,QAAQ,GAAG;QAAE,CAAC,GACxCD,IACN,CAAC;MACH,CAAC,MAAM;QACLU,WAAW,GAAG,CAAC,GAAGP,KAAK,CAACR,QAAQ,EAAE;UAAE,GAAGS,MAAM,CAACK,OAAO;UAAER,QAAQ,EAAE;QAAE,CAAC,CAAC;MACvE;MACA,OAAO;QACL,GAAGE,KAAK;QACRR,QAAQ,EAAEe,WAAW;QACrBd,SAAS,EAAEC,kBAAkB,CAACa,WAAW;MAC3C,CAAC;IACH,KAAK,kBAAkB;MACrB,MAAME,eAAe,GAAGT,KAAK,CAACR,QAAQ,CACnCgB,GAAG,CAAEX,IAAI,IACRA,IAAI,CAACQ,EAAE,KAAKJ,MAAM,CAACK,OAAO,GACtB;QAAE,GAAGT,IAAI;QAAEC,QAAQ,EAAED,IAAI,CAACC,QAAQ,GAAG;MAAE,CAAC,GACxCD,IACN,CAAC,CACAa,MAAM,CAAEb,IAAI,IAAKA,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;MAEtC,OAAO;QACL,GAAGE,KAAK;QACRR,QAAQ,EAAEiB,eAAe;QACzBhB,SAAS,EAAEC,kBAAkB,CAACe,eAAe;MAC/C,CAAC;IACH,KAAK,iBAAiB;MACpB,MAAME,kBAAkB,GAAGX,KAAK,CAACR,QAAQ,CAACgB,GAAG,CAAEX,IAAI,IACjDA,IAAI,CAACQ,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACT,IAAI,CAACQ,EAAE,GAC9B;QAAE,GAAGR,IAAI;QAAEC,QAAQ,EAAEG,MAAM,CAACK,OAAO,CAACR;MAAS,CAAC,GAC9CD,IACN,CAAC;MACD,OAAO;QACL,GAAGG,KAAK;QACRR,QAAQ,EAAEmB,kBAAkB;QAC5BlB,SAAS,EAAEC,kBAAkB,CAACiB,kBAAkB;MAClD,CAAC;IACH;MACE,OAAOX,KAAK;EAChB;AACF;AAEA,eAAeD,QAAQ;;AAEvignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}